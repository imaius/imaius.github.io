<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[更换电脑继续进行hexo写作]]></title>
      <url>/2017/05/04/switch-computer/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;hexo是一个没有后台的主题框架，写作只能在本地，如果你想换电脑继续进行写作，那么你可以参考下面的方法：</p>
<h3 id="1-从官网Git下载git，在新电脑上安装，因为https速度慢，而且每次都要输入口令，常用的是使用ssh。使用下面方法创建："><a href="#1-从官网Git下载git，在新电脑上安装，因为https速度慢，而且每次都要输入口令，常用的是使用ssh。使用下面方法创建：" class="headerlink" title="1.从官网Git下载git，在新电脑上安装，因为https速度慢，而且每次都要输入口令，常用的是使用ssh。使用下面方法创建："></a>1.从官网Git下载git，在新电脑上安装，因为https速度慢，而且每次都要输入口令，常用的是使用ssh。使用下面方法创建：</h3><ul>
<li>打开git bash，在用户主目录下运行：ssh-keygen -t rsa -C “youremail@example.com” 把其中的邮件地址换成自己的邮件地址，然后一路回车</li>
<li>最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</li>
<li>登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。注意：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了。</li>
</ul>
<h3 id="2-下载Node-js，并安装"><a href="#2-下载Node-js，并安装" class="headerlink" title="2.下载Node.js，并安装"></a>2.下载Node.js，并安装</h3><h3 id="3-打开git-bash客户端，输入-npm-install-hexo-cli-g，开始安装hexo"><a href="#3-打开git-bash客户端，输入-npm-install-hexo-cli-g，开始安装hexo" class="headerlink" title="3.打开git bash客户端，输入 npm install hexo-cli -g，开始安装hexo"></a>3.打开git bash客户端，输入 npm install hexo-cli -g，开始安装hexo</h3><h3 id="4-下面就将原来的文件拷贝到新电脑中，但是要注意哪些文件是必须的，哪些文件是可以删除的。"><a href="#4-下面就将原来的文件拷贝到新电脑中，但是要注意哪些文件是必须的，哪些文件是可以删除的。" class="headerlink" title="4.下面就将原来的文件拷贝到新电脑中，但是要注意哪些文件是必须的，哪些文件是可以删除的。"></a>4.下面就将原来的文件拷贝到新电脑中，但是要注意哪些文件是必须的，哪些文件是可以删除的。</h3><ul>
<li>讨论下哪些文件是必须拷贝的：首先是之前自己修改的文件，像站点配置_config.yml，theme文件夹里面的主题，以及source里面自己写的博客文件，这些肯定要拷贝的。除此之外，还有三个文件需要有，就是scaffolds文件夹（文章的模板）、package.json（说明使用哪些包）和.gitignore（限定在提交的时候哪些文件可以忽略）。其实，这三个文件不是我们修改的，所以即使丢失了，也没有关系，我们可以建立一个新的文件夹，然后在里面执行hexo init，就会生成这三个文件，我们只需要将它们拷贝过来使用即可。总结：_config.yml，theme/，source/，scaffolds/，package.json，.gitignore，是需要拷贝的。</li>
<li>再讨论下哪些文件是不必拷贝的，或者说可以删除的：首先是.git文件，无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉。然后是文件夹node_modules（在用npm install会重新生成），public（这个在用hexo g时会重新生成），.deploy_git文件夹（在使用hexo d时也会重新生成），db.json文件。其实上面这些文件也就是是.gitignore文件里面记载的可以忽略的内容。总结：.git/，node_modules/，public/，.deploy_git/，db.json文件需要删除。</li>
</ul>
<h3 id="5-在git-bash中切换目录到新拷贝的文件夹里，使用-npm-install-命令，进行模块安装。很明显我们这里没用hexo-init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo-init去整体初始化，如果不慎在此时用了hexo-init，则站点的配置文件-config-yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo-init。"><a href="#5-在git-bash中切换目录到新拷贝的文件夹里，使用-npm-install-命令，进行模块安装。很明显我们这里没用hexo-init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo-init去整体初始化，如果不慎在此时用了hexo-init，则站点的配置文件-config-yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo-init。" class="headerlink" title="5.在git bash中切换目录到新拷贝的文件夹里，使用 npm install 命令，进行模块安装。很明显我们这里没用hexo init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。"></a>5.在git bash中切换目录到新拷贝的文件夹里，使用 npm install 命令，进行模块安装。很明显我们这里没用hexo init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。</h3><h3 id="6-安装其他的一些必要组件，如果在node-modules里面有的，就不要重复安装了："><a href="#6-安装其他的一些必要组件，如果在node-modules里面有的，就不要重复安装了：" class="headerlink" title="6.安装其他的一些必要组件，如果在node_modules里面有的，就不要重复安装了："></a>6.安装其他的一些必要组件，如果在node_modules里面有的，就不要重复安装了：</h3><ul>
<li>为了使用hexo d来部署到git上，需要安装npm install hexo-deployer-git –save</li>
<li>为了建立RSS订阅，需要安装npm install hexo-generator-feed –save</li>
<li>为了建立站点地图，需要安装npm install hexo-generator-sitemap –save插件安装后，有的需要对配置文件_config.yml进行配置，具体怎么配置，可以参考上面插件在github主页上的具体说明</li>
</ul>
<h3 id="7-使用hexo-g，然后使用hexo-d进行部署，如果都没有出错，就转移成功了！"><a href="#7-使用hexo-g，然后使用hexo-d进行部署，如果都没有出错，就转移成功了！" class="headerlink" title="7.使用hexo g，然后使用hexo d进行部署，如果都没有出错，就转移成功了！"></a>7.使用hexo g，然后使用hexo d进行部署，如果都没有出错，就转移成功了！</h3>]]></content>
      
        
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux/windows/mac下的node.js的安装]]></title>
      <url>/2017/05/02/install-nodejs/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[利用github配合hexo搭建博客]]></title>
      <url>/2017/05/01/first-article/</url>
      <content type="html"><![CDATA[<h2 id="博客初衷"><a href="#博客初衷" class="headerlink" title="博客初衷"></a>博客初衷</h2><p>&emsp;&emsp;一直有一个想法，想把自己的博客整的干净点，技术、随笔之类的东西专门搞一个小博客，之前的站太砸碎了，作为一个资深五迷，我果断的注册了imayday.me这个域名，并在五月来临之际着手搞这个博客，于是。。。本博客的第一篇文章出现了~~o(∩_∩)o</p>
<h2 id="着手开始"><a href="#着手开始" class="headerlink" title="着手开始"></a>着手开始</h2><p>&emsp;&emsp;看了很多博客框架，wordpress、emlog、zblog等等，最终我还是将我的博客选用了hexo的框架，觉得这个框架其实比较轻量，比较适合个人使用，最重要的是，你只需要购买一个域名就能使用啦，省去了空间或者服务器的费用，同时也能满足一下我瞎折腾的欲望，下面介绍一下让这个博客上线的过程，也算是个建站日志吧！</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>需要安装的环境：<ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a>&emsp;&emsp;&emsp;&emsp;(node.js的安装可以点<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">这里</a>)</li>
<li><a href="https://git-scm.com/downloads" target="_blank" rel="external">git</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;(git的安装可以点<a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="external">这里</a>)</li>
</ul>
</li>
<li>其他需要的准备<ul>
<li>购买一个域名，这点要说，不用备案即可使用，也是比较方便的。购买域名的途径有很多，我的域名imayday.me是在万网购买的。</li>
<li>注册一个<a href="https://github.com" target="_blank" rel="external">github</a>账号。你的博客将靠它实现访问。<br>&emsp;&emsp;OK!做完了以上的工作，你就可以开始安装hexo主题框架了！</li>
</ul>
</li>
</ul>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>&emsp;&emsp;所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<pre><code>$ npm install -g hexo-cli
</code></pre><p>&emsp;&emsp;创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令：</p>
<pre><code>hexo init
</code></pre><p>&emsp;&emsp;好啦，至此，全部安装工作已经完成！</p>
<p>&emsp;&emsp;因为Hexo编写的文章都是用 markdown语法写的 所以需要生成静态界面也就是Html网页。</p>
<h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><p>&emsp;&emsp;继续在刚才的Blog目录下执行如下命令，生成静态页面</p>
<pre><code>hexo generate （hexo g  缩写也可以）
</code></pre><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><p>&emsp;&emsp;启动本地服务，进行文章预览调试，命令：</p>
<pre><code>hexo server    （hexo s  缩写也可以）
</code></pre><p>&emsp;&emsp;开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了 ，可以更换个端口号 然后再执行 hexo s<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo server -p 5000 #更改端口随意写</div><div class="line">hexo server -i 192.168.1.1 #自定义 IP</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;运行成功后按Control+L可以停止 如果直接用Hexo s启动会提示错误 就是已经被占用了 所以正确的命令应该是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</div><div class="line">hexo g #生成静态网页</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;上边算是搭建了一个本地的博客系统了 然后就是配置Git了用git就可以把博客移动到远程服务器访问类似<a href="http://imayday.me">我的博客</a></p>
<h3 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h3><ul>
<li>建立Repository</li>
</ul>
<p>&emsp;&emsp;建立与你用户名对应的仓库，仓库名必须为【useame.github.io】固定写法</p>
<ul>
<li>建立关联</li>
</ul>
<p>&emsp;&emsp;打开Blog在本地/Users/wangsen/Blog，Blog是之前建Hexo的文件，有：</p>
<blockquote>
<p>Blog<br>　｜<br>　｜－－ _config.yml<br>　｜－－ node_modules<br>　｜－－ public<br>　｜－－ source<br>　｜－－ db.json<br>　｜－－ package.json<br>　｜－－ scaffolds<br>　｜－－ themes</p>
</blockquote>
<p>&emsp;&emsp;现在我们需要打开_config.yml文件，来建立关联，命令：</p>
<pre><code>vim _config.yml   我建议用sublime
</code></pre><p>&emsp;&emsp;如果终端不是在Blog目录就cd到该目录执行命令,epository地址换成你自己的git地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/imaius/imaius.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;执行如下命令才能使用git部署</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre><p>配置命令：</p>
<pre><code>hexo deploy
</code></pre><p>&emsp;&emsp;作用就是把blog目录下的Public目录下的文件上传至git仓库<br>&emsp;&emsp;然后再浏览器中输入就行了<a href="http://imaius.github.io/，我的" target="_blank" rel="external">http://imaius.github.io/，我的</a> github 的账户叫 imaius ,把这个改成你 github 的账户名就行了<br>&emsp;&emsp;每次修改博客文件后都需要从新部署<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p><strong><a href="http://www.jianshu.com/p/eb02029f7a81" target="_blank" rel="external">一些常用命令</a></strong></p>
<h3 id="域名绑定-可选"><a href="#域名绑定-可选" class="headerlink" title="域名绑定(可选)"></a>域名绑定(可选)</h3><p>&emsp;&emsp;其实这一步之前就已经可以正常访问了，有需要的继续进行下一步。</p>
<p>&emsp;&emsp;首先登录你的github，建一个项目，命名格式为： 账户.github.io，如下图（我的已经建过了所以提示已存在）<br><img src="https://ooo.0o0.ooo/2017/05/03/59096f3dd88b8.png" alt=""> </p>
<p>&emsp;&emsp;然后你需要把你的域名做一个chanel记录，记录值为上面的域名，我的就是imaius.github.io&emsp;然后在你的本地站点目录里的source目录下添加一个CNAME文件，不带后缀，可以用终端切换到source目录下，执行命令如下</p>
<pre><code>vim CNAME
</code></pre><p>&emsp;&emsp;内容是域名地址不带www和http 就类似我的是 imayday.me，填写完了之后再重新部署到github pages上（部署简写命令hexo d -g)，打开自己的博客尽情开始各种蹂躏吧</p>
<h2 id="说在最后"><a href="#说在最后" class="headerlink" title="说在最后"></a>说在最后</h2><p>&emsp;&emsp;至此博客已经部署成功，如过你有什么疑问也可以在这里留言~本博客准备长期维护，希望各位多多捧场！</p>
]]></content>
      
        <categories>
            
            <category> 建站教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
